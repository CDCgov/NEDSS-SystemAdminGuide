# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # required to list all branches :contentReference[oaicite:1]{index=1}

      - name: Setup Ruby
        # https://github.com/ruby/setup-ruby/releases/tag/v1.207.0
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
  
      - name: Get All Release Branches
        id: get-branches
        run: |
          echo "RELEASE_BRANCHES<<EOF" >> $GITHUB_ENV
          git for-each-ref --format='%(refname:short)' refs/remotes/origin/ | grep '^origin/release-' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # - name: Checkout each release branch
      #   run: |
      #     mkdir -p _previous_versions
      #     for branch in $RELEASE_BRANCHES; do
      #       echo "$branch"
      #       name=$(basename "$branch")
      #       git worktree add "_previous_versions/$name" "$branch"

      #       ls
      #       pwd
      #       cp previous_version_template.md _previous_versions/$name/index.md

      #       # Replace placeholder with actual name
      #       sed -i "s/RELEASE_NAME/$name/g" "_previous_versions/$name/index.md"
      #     done

      - name: Checkout and prepare release versions
        run: |
          mkdir -p _previous_versions
          for branch in $RELEASE_BRANCHES; do
            name=$(basename "$branch")
            folder="_previous_versions/$name"
            git worktree add "$folder" "$branch"

            # Create index.md
            cat <<EOF > "$folder/index.md"
          ---
          title: $name
          parent: Previous Versions
          has_children: true
          nav_order: 1
          ---
          # $name
          Auto-generated index for this version
          EOF

                # Add parent front matter to pages missing it
                find "$folder" -name '*.md' ! -name 'index.md' | while read file; do
                  if grep -q '^---' "$file"; then
                    if ! grep -q '^parent:' "$file"; then
                      awk -v parent="$name" '
                        BEGIN { inserted=0 }
                        {
                          print $0
                          if ($0 == "---" && inserted == 0) {
                            getline; print $0
                            print "parent: " parent
                            inserted=1
                          }
                        }
                      ' "$file" > "${file}.tmp" && mv "${file}.tmp" "$file"
                    fi
                  fi
                done
              done

      - name: Upload pages directory as artifact before build
        uses: actions/upload-artifact@v4
        with:
          name: pages_upload
          path: .

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
